% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pairwise_pep_peak_corp.R
\name{getPepPeakCorp}
\alias{getPepPeakCorp}
\title{Establishes pairwise correspondence between extracted-ion chromatograms.}
\usage{
getPepPeakCorp(featureTable, pairName, XICs.A = NULL, XICs.B = NULL,
  alignType, oswFeatureList = NULL, spanvalue = 0.1,
  normalization = "mean", simMeasure = "dotProductMasked",
  goFactor = 0.125, geFactor = 40, cosAngleThresh = 0.3,
  OverlapAlignment = TRUE, dotProdThresh = 0.96, gapQuantile = 0.5,
  hardConstrain = FALSE, samples4gradient = 100, expRSE = 8,
  samplingTime = 3.4, RSEdistFactor = 3.5)
}
\arguments{
\item{featureTable}{A table of retention time identifications for each peptides. The retention times
could be annotated manually or through softwares like OpenSWATH.}

\item{pairName}{Names of runs joined with underscore. e.g. runA_runB, This will allow
alignment of runB to runA.}

\item{XICs.A}{List of extracted ion chromatograms of runA.}

\item{XICs.B}{List of extracted ion chromatograms of runB.}

\item{alignType}{Available alignment methods are "global", "local" and "hybrid".}

\item{oswFeatureList}{List of features detected in each run. For feature detection
OpenSWATH, Spectronaut, Skyline etc can be used.}

\item{spanvalue}{A numeric Spanvalue for LOESS fit.}

\item{normalization}{A character string. Must be selected from (mean, l2)}

\item{simMeasure}{A character string. Must be selected from (dotProduct, cosineAngle,
cosine2Angle, dotProductMasked, euclideanDist, covariance and correlation)}

\item{goFactor}{A numeric scalar. Penalty for introducing first gap in alignment. This value is multiplied by base gap-penalty.}

\item{geFactor}{A numeric scalar. Penalty for introducing subsequent gaps in alignment. This value is multiplied by base gap-penalty.}

\item{cosAngleThresh}{(numeric) In simType = dotProductMasked mode, angular similarity should be higher than cosAngleThresh otherwise similarity is forced to zero.}

\item{OverlapAlignment}{(logical) An input for alignment with free end-gaps. False: Global alignment, True: overlap alignment.}

\item{dotProdThresh}{(numeric) In simType = dotProductMasked mode, values in similarity matrix higher than dotProdThresh quantile are checked for angular similarity.}

\item{gapQuantile}{A numeric scalar. Must be between 0 and 1. This is used to calculate base gap-penalty from similarity distribution.}

\item{hardConstrain}{A logical scalar. if false; indices farther from noBeef distance are filled with distance from linear fit line.}

\item{samples4gradient}{A numeric scalar. This parameter modulates penalization of masked indices.}

\item{expRSE}{Expected residual standard error(rse) for constraining hybrid alignment, if rse from LOESS fit comes out to be large.}

\item{samplingTime}{Time difference between two data-points in each chromatogram. For hybrid and local alignment, samples are assumed to be equally time-spaced.}

\item{RSEdistFactor}{A numeric scalar. This defines how much distance in the unit of rse remains a noBeef zone.}
}
\value{
A numeric matrix
}
\description{
This function calculates three matrices for affine gap alignment using input
similarity matrix and affine gap opening and gap closing penalties. An
implementation of Needleman-Wunsch alignment and overlap alignment is also
provided. All three matrices are clubbed together in an output S4 object.
}
\examples{
pair <- "run1_run2"
MappedTime2 <- getPepPeakCorp(StrepAnnot, pair, StrepChroms[["run1"]], StrepChroms[["run2"]],
"hybrid", oswOutStrep, expRSE = 7.4)
}
